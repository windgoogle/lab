package com.woo.base.pattern.vistor;

import java.util.List;

/**
 * Created by huangfeng on 2016/12/20.
 * 访问者模式
 * 访问者模式把数据结构和作用于结构上的操作解耦合，使得操作集合可相对自由地演化。
 * 优点是增加操作很容易，因为增加操作意味着增加新的访问者。
 * 访问者模式将有关行为集中到一个访问者对象中，其改变不影响系统数据结构。
 * 缺点就是增加新的数据结构很困难
 * 1、符合单一职责原则：凡是适用访问者模式的场景中，元素类中需要封装在访问者中的操作必定是与元素类本身关系不大且是易变的操作，
 *  使用访问者模式一方面符合单一职责原则，另一方面，因为被封装的操作通常来说都是易变的，
 *  所以当发生变化时，就可以在不改变元素类本身的前提下，实现对变化部分的扩展。
 * 2、扩展性良好：元素类可以通过接受不同的访问者来实现对不同操作的扩展。
 *
 * 适用情况
 *1)、 一个对象结构包含很多类对象，它们有不同的接口，而你想对这些对象实施一些依赖于其具体类的操作。
 *2)、 需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而你想避免让这些操作“污染”这些对象的类。Visitor模式使得你可以将相关的操作集中起来 定义在一个类中。
 *3)、 当该对象结构被很多应用共享时，用Visitor模式让每个应用仅包含需要用到的操作。
 *4)、定义对象结构的类很少改变，但经常需要在此结构上定义新的操作。改变对象结构类需要重定义对所有访问者的接口，这可能需要很大的代价。如果对象结构类经常改变，那么可能还是在这些类中定义这些操作较好。
 *
 */


public class Client {
    public static void main(String[] args) {
        List<Element> list = ObjectStruture.getList();
        for (Element  e : list) {
            e.accept(new Visitor());
        }
    }
}

